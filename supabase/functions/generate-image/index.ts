
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import Replicate from "https://esm.sh/replicate@0.25.2"

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const REPLICATE_API_KEY = Deno.env.get('REPLICATE_API_KEY')
    if (!REPLICATE_API_KEY) {
      throw new Error('REPLICATE_API_KEY is not set')
    }

    const replicate = new Replicate({
      auth: REPLICATE_API_KEY,
    })

    const body = await req.json()

    // Check if request is complete with required fields
    if (!body.prompt || !body.model) {
      return new Response(
        JSON.stringify({ 
          error: "Missing required fields: prompt and model are required" 
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 400,
        }
      )
    }

    console.log(`Generating image with model: ${body.model}, prompt: ${body.prompt}`)

    let modelId
    let modelConfig

    // Use the Flux model as the primary and most reliable option
    modelId = "black-forest-labs/flux-schnell"
    
    modelConfig = {
      prompt: body.prompt,
      go_fast: true,
      megapixels: "1",
      num_outputs: 1,
      aspect_ratio: "1:1",
      output_format: "webp",
      output_quality: 80,
      num_inference_steps: 4
    }

    // Run the model with better error handling
    try {
      console.log("Starting generation with model:", modelId);
      const output = await replicate.run(modelId, {
        input: modelConfig
      });

      console.log("Generation response:", output);
      
      if (!output || (Array.isArray(output) && output.length === 0)) {
        throw new Error("No output was generated by the model");
      }

      return new Response(JSON.stringify({ 
        output, 
        note: "Image generated successfully with Flux model" 
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    } catch (modelError) {
      console.error("Model error:", modelError);
      throw new Error(`Error generating image: ${modelError.message}`);
    }
  } catch (error) {
    console.error("Error in generate-image function:", error);
    
    return new Response(JSON.stringify({ 
      error: error.message || "An unknown error occurred",
      details: "Please check your API key and model selection"
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
})

