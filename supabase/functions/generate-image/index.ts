
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import Replicate from "https://esm.sh/replicate@0.25.2"

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const REPLICATE_API_KEY = Deno.env.get('REPLICATE_API_KEY')
    if (!REPLICATE_API_KEY) {
      throw new Error('REPLICATE_API_KEY is not set')
    }

    const replicate = new Replicate({
      auth: REPLICATE_API_KEY,
    })

    const body = await req.json()

    // Check if request is complete with required fields
    if (!body.prompt || !body.settings) {
      return new Response(
        JSON.stringify({ 
          error: "Missing required fields: prompt and settings are required" 
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 400,
        }
      )
    }

    console.log(`Generating image with prompt: ${body.prompt}, settings:`, body.settings)

    // Use the Flux model as the primary and most reliable option
    const output = await replicate.run(
      "black-forest-labs/flux-schnell",
      {
        input: {
          prompt: body.prompt,
          go_fast: true,
          megapixels: "1",
          num_outputs: body.settings.numOutputs || 1,
          aspect_ratio: body.settings.aspectRatio || "1:1",
          output_format: "png",
          output_quality: 100,
          num_inference_steps: 4
        }
      }
    )

    console.log("Generation response:", output)
    
    if (!output || (Array.isArray(output) && output.length === 0)) {
      throw new Error("No output was generated by the model");
    }

    // Format the response to match what the frontend expects
    const formattedResponse = Array.isArray(output) 
      ? output.map(url => ({ image_url: url })) 
      : [{ image_url: output }];

    // Add cache control headers to prevent image expiration
    const responseHeaders = {
      ...corsHeaders,
      'Content-Type': 'application/json',
      'Cache-Control': 'public, max-age=31536000, immutable'
    };

    return new Response(JSON.stringify({ 
      images: formattedResponse,
      message: "Images generated successfully" 
    }), {
      headers: responseHeaders,
      status: 200,
    });
  } catch (error) {
    console.error("Error in generate-image function:", error);
    
    return new Response(JSON.stringify({ 
      error: error.message || "An unknown error occurred",
      details: "Please check your API key and model selection"
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
})
